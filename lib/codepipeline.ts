import {Stack} from "aws-cdk-lib";
import {Artifact, Pipeline} from "aws-cdk-lib/aws-codepipeline";
import {CodeBuildAction, CodeCommitSourceAction} from "aws-cdk-lib/aws-codepipeline-actions";
import {Repository} from "aws-cdk-lib/aws-codecommit";
import {BuildSpec, LinuxBuildImage, PipelineProject} from "aws-cdk-lib/aws-codebuild";
import {ManagedPolicy} from "aws-cdk-lib/aws-iam";

export class Codepipeline {

    private readonly stack: Stack
    private sourceArtifact: Artifact;
    private buildArtifact: Artifact;

    constructor(stack: Stack) {
        this.stack = stack
    }

    public setupPipeline = () => {

        new Pipeline(this.stack, "CodePipeline", {
            stages: [

                //Source Stage
                {
                    stageName: "Source",
                    actions: [this.setupSourceStage()]
                },

                //Build Stage
                {
                    stageName: "Build",
                    actions: [this.setupBuildStage()]
                }
            ]
        });
    }

    private setupSourceStage = () => {
        this.sourceArtifact = new Artifact();
        return new CodeCommitSourceAction({
            actionName: "Source",
            output: this.sourceArtifact,
            repository: Repository.fromRepositoryName(this.stack, "CustomerRepository", "customer-service")
        });
    }

    private setupBuildStage = () => {
        this.buildArtifact = new Artifact();

        const codeBuildProject = new PipelineProject(this.stack, "CodeBuildProject", {
            projectName: "CodeBuild-Docker-Scan",
            environment: {
                buildImage: LinuxBuildImage.STANDARD_5_0,
                privileged: true,
                environmentVariables: {
                    AWS_ACCOUNT_ID: {
                        value: this.stack.account
                    }
                }
            },
            buildSpec: BuildSpec.fromSourceFilename("buildspec.yml"),
        });

        codeBuildProject.role?.addManagedPolicy(
            ManagedPolicy.fromAwsManagedPolicyName('AmazonEC2ContainerRegistryPowerUser')
        );

        return new CodeBuildAction({
            actionName: "Build",
            input: this.sourceArtifact,
            project: codeBuildProject,
            outputs: [this.buildArtifact]
        })
    }
}