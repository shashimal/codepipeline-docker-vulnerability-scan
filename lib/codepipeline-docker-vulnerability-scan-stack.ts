import { Stack, StackProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import {CodeBuildAction, CodeCommitSourceAction} from "aws-cdk-lib/aws-codepipeline-actions";
import {Artifact, Pipeline} from "aws-cdk-lib/aws-codepipeline";
import {Repository} from "aws-cdk-lib/aws-codecommit";
import {BuildSpec, LinuxBuildImage, PipelineProject} from "aws-cdk-lib/aws-codebuild";
import {ManagedPolicy} from "aws-cdk-lib/aws-iam";

export class CodepipelineDockerVulnerabilityScanStack extends Stack {

  private sourceArtifact: Artifact;
  private buildArtifact: Artifact

  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    const codePipeline = new Pipeline(this, "CodePipeline", {});

    const sourceAction = this.setupSourceStage();
    const buildAction = this.setupBuildStage();

    codePipeline.addStage({
      stageName: "Source",
      actions: [sourceAction]
    });

    codePipeline.addStage({
      stageName: "Build",
      actions: [buildAction]
    });

  }

  private setupSourceStage = () => {
    this.sourceArtifact = new Artifact();
    return new CodeCommitSourceAction({
      actionName: "Source-Stage",
      output:  this.sourceArtifact,
      repository: Repository.fromRepositoryName(this,"CustomerRepository", "customer-service")
    });
  }

  private setupBuildStage = () => {
    this.buildArtifact = new Artifact();

    const codeBuildProject = new PipelineProject(this, "CodeBuildProject", {
      projectName: "CodeBuild-Docker-Scan",
      environment:  {
        buildImage: LinuxBuildImage.STANDARD_5_0,
        privileged: true,
        environmentVariables: {
          AWS_ACCOUNT_ID: {
            value: this.account
          }
        }
      },
      buildSpec: BuildSpec.fromSourceFilename("buildspec.yml"),
    });

    codeBuildProject.role?.addManagedPolicy(
        ManagedPolicy.fromAwsManagedPolicyName('AmazonEC2ContainerRegistryPowerUser')
    );

    return new CodeBuildAction({
      actionName: "Build",
      input: this.sourceArtifact,
      project: codeBuildProject,
      outputs: [this.buildArtifact]
    })
  }
}
